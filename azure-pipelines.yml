
trigger:
- master

variables: 
  LINUX_INSTALL: "g++-9 git scons libasound2-dev libfreetype6-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev"
  LINUX_OPTIONS: "builtin_openssl=yes builtin_zlib=yes builtin_libpng=yes use_static_cpp=yes no_editor_splash=yes verbose=yes"

jobs:
  ######## build gcc-9 with optimizations for linking statically
  - job: "build_gcc9"
    steps:
    - script: |
        sudo apt-get -qq update
        sudo apt-get -qq install build-essential -y
        sudo apt-get -qq build-dep gcc-5 -y
        wget https://ftpmirror.gnu.org/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz
        tar xf gcc-9.2.0.tar.gz
        gcc-9.2.0/contrib/download_prerequisites
        mkdir build
        cd build
        ../gcc-9.2.0/configure -v --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --prefix=/usr/local/gcc-9.2 --enable-checking=no --enable-languages=c,c++ --disable-multilib --program-suffix=-9.2
        make BUILD_CONFIG='bootstrap-O3 bootstrap-lto' -j5 profiledbootstrap
        sudo make install-strip
        export PATH="/usr/local/gcc-9.2/bin:$PATH"
        export LD_LIBRARY_PATH="/usr/local/gcc-9.1/lib64:$LD_LIBRARY_PATH"
        gcc-9 --version
        g++-9 --version

  ###### CREATE A RELEASE IN GITHUB
  - job: "create_github_release"
    steps:
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: for-azure-scu
        repositoryName: santouits/test-lto-and-scu
        tagSource: manual
        tag: $(Build.BuildNumber)    
        addChangeLog: false
    displayName: 'create_github_release'

  ##### JOB 1 ######
  - job: "linux_tools_gnu_releasedebug_lto"
    pool:
      vmImage: "ubuntu-16.04"
    steps:
    - script: |
        cat /etc/*-release
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get -qq update
        sudo apt-get -qq install $(LINUX_INSTALL) -y
        sudo ln -s /usr/bin/gcc-9 gcc
        sudo ln -s /usr/bin/g++-9 g++
        git clone --depth=1 https://github.com/godotengine/godot
        cd godot
        scons p=x11 CC=gcc-9 CXX=g++-9 -j5 tools=yes target=release_debug use_lto=yes $(LINUX_OPTIONS)

    - task: CopyFiles@2
      inputs:
        contents: 'godot/bin/*' 
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: GitHubRelease@0
      inputs:
        action: edit
        gitHubConnection: for-azure-scu
        repositoryName: santouits/test-lto-and-scu
        tag: $(Build.BuildNumber)    
        assets: $(Build.ArtifactStagingDirectory)/**
        assetUploadMode: replace
        addChangeLog: false
    displayName: 'linux_tools_gnu_releasedebug_lto'

  ##### JOB 2 ######
  - job: "linux_tools_gnu_release_lto"
    pool:
      vmImage: "ubuntu-16.04"
    steps:
    - script: |
        cat /etc/*-release
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get -qq update
        sudo apt-get -qq install $(LINUX_INSTALL) -y
        sudo ln -s /usr/bin/gcc-9 gcc
        sudo ln -s /usr/bin/g++-9 g++
        git clone --depth=1 https://github.com/godotengine/godot
        cd godot
        sed -i 's/O2/O3/g' platform/x11/detect.py
        sed -i 's/.opt.tools/.opt.tools.O3/g' SConstruct
        scons p=x11 CC=gcc-9 CXX=g++-9 -j5 tools=yes target=release_debug use_lto=yes $(LINUX_OPTIONS)

    - task: CopyFiles@2
      inputs:
        contents: 'godot/bin/*' 
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: GitHubRelease@0
      inputs:
        action: edit
        gitHubConnection: for-azure-scu
        repositoryName: santouits/test-lto-and-scu
        tag: $(Build.BuildNumber)    
        assets: $(Build.ArtifactStagingDirectory)/**
        assetUploadMode: replace
        addChangeLog: false
    displayName: 'linux_tools_gnu_release_lto'
